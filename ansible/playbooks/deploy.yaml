- name: Set up Petclinic Spring Boot application on AWS Linux with auto-start
  hosts: all
  become: true
  vars:
    jar_file_path: "{{ lookup('env', 'JAR_PATH') }}"
    db_pass: "{{ lookup('env', 'DB_PASS') }}"
    db_user: "{{ lookup('env', 'DB_USER') }}"
    db_url: "{{ lookup('env', 'DB_URL') }}"

  tasks:
    - name: Update system
      yum:
        name: "*"
        state: latest

    - name: Install Amazon Corretto 17
      yum:
        name: java-17-amazon-corretto-headless
        state: present

    - name: Check Java version
      command: java -version
      register: java_version
      changed_when: false

    - name: Create directory for Petclinic application
      file:
        path: "/opt/petclinic"
        state: directory
        mode: '0755'

    - name: Copy .jar file from host to server
      copy:
        src: "{{ jar_file_path }}"
        dest: "/opt/petclinic/petclinic.jar"
        mode: '0644'

    - name: Create environment file for systemd
      copy:
        dest: "/etc/default/petclinic"
        content: |
          POSTGRES_PASS={{ db_pass }}
          POSTGRES_USER={{ db_user }}
          POSTGRES_URL={{ db_url }}
          DATABASE_TYPE=postgres

    - name: Create systemd unit file for auto-start
      copy:
        dest: "/etc/systemd/system/petclinic.service"
        content: |
          [Unit]
          Description=Petclinic Spring Boot Application
          After=network.target

          [Service]
          User=ec2-user
          WorkingDirectory=/opt/petclinic
          ExecStart=/usr/bin/java -jar /opt/petclinic/petclinic.jar
          EnvironmentFile=/etc/default/petclinic 
          SuccessExitStatus=143
          Restart=always
          RestartSec=10
          StandardOutput=syslog
          StandardError=syslog
          SyslogIdentifier=petclinic

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to apply new services
      command: systemctl daemon-reload

    - name: Enable and start Petclinic service
      systemd:
        name: petclinic
        enabled: yes
        state: started

    - name: Check the status of Petclinic service
      systemd:
        name: petclinic
        state: started
      register: petclinic_status

    - debug:
        msg: "Petclinic service status: {{ petclinic_status.status }}"
